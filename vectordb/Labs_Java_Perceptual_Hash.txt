package org.example;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class PHashService {
    public static void main(String[] args) {
        PHashService pHashService = new PHashService();
        String folderPath = "C:/KAN/Code/vector_db_poc";
        String targetFilePath = "C:/KAN/Code/vector_db_poc/Breakfast_Lifestyle_123.jpg";

        List<String> results = pHashService.comparePHashes(folderPath, targetFilePath);
        for (String result : results) {
            System.out.println(result);
        }
    }
    public List<String> comparePHashes(String folderPath, String targetFilePath) {
        List<String> results = new ArrayList<>();
        File folder = new File(folderPath);
        File targetFile = new File(targetFilePath);

        if (!folder.isDirectory() || !targetFile.exists()) {
            throw new IllegalArgumentException("Invalid folder or target file path.");
        }

        // Compute pHash for the target file
        Optional<String> targetPHash = generatePHash(targetFile);
        if (!targetPHash.isPresent()) {
            throw new RuntimeException("Failed to compute pHash for the target file.");
        }

        // Iterate through files in the folder
        for (File file : folder.listFiles()) {
            if (file.isFile() && !file.getAbsolutePath().equals(targetFilePath)) {
                Optional<String> filePHash = generatePHash(file);
                filePHash.ifPresent(phash -> {
                    int hammingDistance = calculateHammingDistance(targetPHash.get(), phash);
                    results.add("File: " + file.getName() + ", Hamming Distance: " + hammingDistance);
                });
            }
        }

        return results;
    }

    private Optional<String> generatePHash(File file) {
        try {
            BufferedImage img = ImageIO.read(file);
            return Optional.ofNullable(computePHash(img));
        } catch (Exception e) {
            e.printStackTrace();
            return Optional.empty();
        }
    }

    private String computePHash(BufferedImage img) {
        // Resize the image to 16x16
        BufferedImage resizedImg = new BufferedImage(32, 32, BufferedImage.TYPE_BYTE_GRAY);
        Graphics2D g = resizedImg.createGraphics();
        g.drawImage(img, 0, 0, 32, 32, null);
        g.dispose();

        // Create a pixel matrix
        double[][] pixelMatrix = new double[32][32];
        for (int x = 0; x < 32; x++) {
            for (int y = 0; y < 32; y++) {
                pixelMatrix[x][y] = new Color(resizedImg.getRGB(x, y)).getRed();
            }
        }

        // Apply DCT
        double[][] dctValues = applyDCT(pixelMatrix);

        // Calculate the median
        double median = calculateMedian(dctValues);

        // Generate the binary hash
        StringBuilder binaryHash = new StringBuilder();
        for (int i = 0; i < 32; i++) {
            for (int j = 0; j < 32; j++) {
                binaryHash.append(dctValues[i][j] > median ? "1" : "0");
            }
        }
        return binaryHash.toString();
    }

    private double calculateMedian(double[][] dctValues) {
        double[] dctSubset = new double[1024];
        int index = 0;
        for (int i = 0; i < 32; i++) {
            for (int j = 0; j < 32; j++) {
                dctSubset[index++] = dctValues[i][j];
            }
        }
        java.util.Arrays.sort(dctSubset);
        return dctSubset[dctSubset.length / 2];
    }

    private double[][] applyDCT(double[][] matrix) {
        int N = matrix.length;
        double[][] dct = new double[N][N];
        for (int u = 0; u < N; u++) {
            for (int v = 0; v < N; v++) {
                double sum = 0.0;
                for (int i = 0; i < N; i++) {
                    for (int j = 0; j < N; j++) {
                        sum += matrix[i][j] *
                                Math.cos(((2 * i + 1) * u * Math.PI) / (2 * N)) *
                                Math.cos(((2 * j + 1) * v * Math.PI) / (2 * N));
                    }
                }
                double cU = (u == 0) ? 1.0 / Math.sqrt(2) : 1.0;
                double cV = (v == 0) ? 1.0 / Math.sqrt(2) : 1.0;
                dct[u][v] = 0.25 * cU * cV * sum;
            }
        }
        return dct;
    }

   /* private double calculateMedian(double[][] dctValues) {
        double[] dctSubset = new double[64];
        int index = 0;
        for (int i = 0; i < 8; i++) {
            for (int j = 0; j < 8; j++) {
                dctSubset[index++] = dctValues[i][j];
            }
        }
        java.util.Arrays.sort(dctSubset);
        return dctSubset[dctSubset.length / 2];
    }*/

    private int calculateHammingDistance(String hash1, String hash2) {
        int distance = 0;
        for (int i = 0; i < hash1.length(); i++) {
            if (hash1.charAt(i) != hash2.charAt(i)) {
                distance++;
            }
        }
        return distance;
    }
}
